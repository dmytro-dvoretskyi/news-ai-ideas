import json
import requests
from openai import OpenAI
import streamlit as st
import re


def parse_ideas(post_ideas_content):
    ideas = []
    idea_parts = post_ideas_content.split("\n\n")  # –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –æ–∫—Ä–µ–º—ñ —ñ–¥–µ—ó

    for part in idea_parts:
        ideas.append(part)

    return ideas


def analyze_trends_and_generate_post_idea_gpt(articles, openai_api_key):
    client = OpenAI(api_key=openai_api_key)

    article_details = "\n".join([f"Title: {article['title']}\nURL: {article['url']}" for article in articles])
    instructions = """
    –í–∏ - –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –ø–∏—Å—å–º–µ–Ω–Ω–∏–∫, —è–∫–∏–π —Ä–æ–∑—Ä–æ–±–ª—è—î —ñ–¥–µ—ó –¥–ª—è –ø–æ—Å—Ç—ñ–≤ —É —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ–¥—ñ–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –í–∞—à–∞ –∫–æ–º–ø–∞–Ω—ñ—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥—É —Ç–∞ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—ñ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –ø—Ä–æ—Ü–µ—Å—ñ–≤ —É —Ä—ñ–∑–Ω–∏—Ö –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è—Ö. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –®–Ü —Ç–∞, –≤–∏—Ö–æ–¥—è—á–∏ –∑ —Ü—å–æ–≥–æ, —Å—Ç–≤–æ—Ä—ñ—Ç—å —ñ–¥–µ—ó –ø–æ—Å—Ç—ñ–≤. –ö–æ–∂–Ω–∞ —ñ–¥–µ—è –º–∞—î –±—É—Ç–∏ —Ü—ñ–∫–∞–≤–æ—é, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—é —Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, —è–∫–∞ —Ü—ñ–∫–∞–≤–∏—Ç—å—Å—è —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º —Ç–∞ –π–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º —É –±—ñ–∑–Ω–µ—Å—ñ.

    –§–æ—Ä–º–∞—Ç—É–π—Ç–µ –∫–æ–∂–Ω—É —ñ–¥–µ—é —É JSON –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–æ–ª—è–º–∏:
    1) "title": "–ù–∞–∑–≤–∞ —ñ–¥–µ—ó",
    2) "content": "–°—É—Ç—å —ñ–¥–µ—ó (50-80 —Å–ª—ñ–≤), –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–µ, —è–∫ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –º–æ–∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –±—ñ–∑–Ω–µ—Å —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏",
    3) "inform": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–≤—ñ–¥",
    4) "links": "URL –Ω–æ–≤–∏–Ω–∏"

    –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
    {
      "title": "–ù–∞–∑–≤–∞ —ñ–¥–µ—ó —Ç—É—Ç",
      "content": "–¢–µ–∫—Å—Ç —Å—É—Ç—ñ —ñ–¥–µ—ó —Ç—É—Ç...",
      "inform": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–≤—ñ–¥ —Ç—É—Ç...",
      "links": "https://example.com/link-to-news-article"
    }

    –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å 3 —ñ–¥–µ—ó –∑–∞ —Ü–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º.
    """

    prompt = f"{instructions}\n\nNews Articles:\n{article_details}\n\nGenerate three post ideas:"

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": "Generate the ideas."}
            ],
            max_tokens=1500,
            temperature=0.5
        )

        print("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI API:")
        print(response.choices[0].message.content)

        if response.choices and response.choices[0].message.content:
            ideas = parse_ideas(response.choices[0].message.content)

            # –ó–∞–ø–∏—Å —ñ–¥–µ–π —É JSON —Ñ–∞–π–ª
            with open('post_ideas.json', 'w', encoding='utf-8') as f:
                json.dump(ideas, f, ensure_ascii=False, indent=4)
                print("–Ü–¥–µ—ó –¥–ª—è –ø–æ—Å—Ç—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É JSON —Ñ–∞–π–ª.")

            return ideas
        else:
            print("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI API –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–º—ñ—Å—Ç–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.")
            return []

    except Exception as e:
        print(f"Error in GPT-4 post idea generation: {e}")
        return []

def get_news_articles(news_api_key, search_queries=["AI", "Artificial Itelligence", "Technology"]):
    api_url = "https://newsapi.org/v2/top-headlines"
    all_results = []
    for query in search_queries:
        params = {
            "q": query,
            "from": "2023-12-02",
            "to": "2023-12-05",
            "sortBy": "popularity",
            "page": 1,
            "apiKey": news_api_key
        }
        response = requests.get(api_url, params=params)
        if response.status_code == 200:
            news_data = response.json()
            all_results.extend(news_data.get("articles", []))
        else:
            print(f"Error fetching news for '{query}': {response.status_code}")
            pass

    return all_results

def main():
    openai_api_key = "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"
    news_api_key = "4c5096179734485aba9279b5a9183788"

    st.title("I–¥–µ—ó –ø–æ –Ω–æ–≤–∏–Ω–∞–º –ø—Ä–æ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç")
    text_input = st.text_input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–º–∏ –Ω–æ–≤–∏–Ω —è–∫—ñ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å üëá", placeholder="AI, Artificial Itelligence, Technology")
    if text_input:
        with st.spinner("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏–Ω..."):
            articles = get_news_articles(news_api_key, text_input.split(','))
        if articles:
            for article in articles:
                st.markdown(f'**{article["source"]["name"]}** [{article["title"]}]({article["url"]})')
            st.success(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(articles)} –Ω–æ–≤–∏–Ω.")
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–¥–µ–π –¥–ª—è –ø–æ—Å—Ç—ñ–≤..."):
                post_ideas = analyze_trends_and_generate_post_idea_gpt(articles, openai_api_key)
            st.success(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(post_ideas)} —ñ–¥–µ—ó.")
        else:
            st.success("–ù–µ–º–∞—î –Ω–æ–≤–∏–Ω –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")

        if post_ideas:
            for idx, idea in enumerate(post_ideas, start=1):
                idea_dict = dict(json.loads(idea))
                st.markdown(f"""
                    ### –Ü–¥–µ—è {idx}\n
                    #### {idea_dict["title"]}\n
                    {idea_dict["content"]}\n
                    {idea_dict["inform"]}
                    {idea_dict["links"]}
                """)
                st.json(idea, expanded=False)

        st.button('Rerun')

if __name__ == "__main__":
    main()
